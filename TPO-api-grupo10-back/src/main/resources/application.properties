spring.application.name=demo
server.port=8080

# ✅ Configuración de PostgreSQL (Render o Neon)
spring.datasource.url=spring.datasource.url=jdbc:postgresql://dpg-d1u30hidbo4c73e5hd5g-a.oregon-postgres.render.com/apigrupo10?sslmode=require

spring.datasource.username=apigrupo10_user
spring.datasource.password=KmfSiiTMrOuHVvXvRDJ9npvhclWZQsA4
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ✅ Configuración de JWT (no tocar si ya funciona)
application.security.jwt.secretKey=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
application.security.jwt.expiration=86400000

# ✅ CORS (para conexión desde el frontend)
spring.web.cors.allow-credentials=true
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE
spring.web.cors.allowed-headers=Content-Type,Authorization 

# ✅ Configuración para subida de archivos
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ✅ Cloudinary (solo si lo usás)
cloudinary.cloud_name=dyjsyw0di
cloudinary.api_key=926455567785151
cloudinary.api_secret=tu_api_secret_real
